# -*- coding: utf-8 -*-
"""V-S-cau1a.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NvjHjntRo2Am-73Z8IZLiTxKSqvy7pP0
"""

# Commented out IPython magic to ensure Python compatibility.
from scipy.io.wavfile import read
from scipy.io.wavfile import write
import sys
import matplotlib.pyplot as plt
import numpy as np
import os
import IPython.display as ipd
import pandas as pd
from scipy.io import wavfile
import math
# %matplotlib inline

def MA(Fs,x):
  N = len(x) #So phan tu trong x
  d_khung = int(Fs * 0.025) # do dai 1 khung
  spt = math.floor(N/d_khung) #Số phần tử trong 1 khung
  ma = []
  for i in range(1,spt+1):
    frame = x[(i-1)*d_khung+1 : d_khung*i]
    ma.append(sum(abs(frame)))
   #chuan hoa
  chuanhoa_ma = ma / max(ma)
  #print(len(chuanhoa_ma))
  return chuanhoa_ma;

def threshold(f, g):
    Nf = len(f)
    Ng = len(g)
    Tmin = min(g)
    Tmax = max(f)
    print(min(f),min(g),Tmin)
    print(max(f),max(g),Tmax)
    T = 0.5 * (Tmin + Tmax)
    i = len(np.where(f < T)[0])
    p = len(np.where(g > T)[0])
    j = -1
    q = -1
    tong1 = 0
    tong2 = 0
    while i == j or p == q:
      for a in np.arange(0,Nf,1):
        tong1 = max(f(a) - T,0) + tong1
      for b in np.arange(0,Ng,1):
        tong2 = max(T - g(b),0) + tong2
      A = (1.0 / Nf) * tong1 - (1.0 / Ng) * tong2
      if A < 0:
        Tmin = T
      else:
        Tmax = T
      T = 0.5 * (Tmin + Tmax)
      j = i
      q = p
      i = len(np.where(f < T)[0])
      p = len(np.where(g > T)[0])
    print("KL:" + str(T))
    return T

dic_huanluyen={
    'phone_F1.wav':[0.00,0.53,2.75,3.23],
    'phone_M1.wav':[0,0.46,3.52,4.15],
    'studio_F1.wav':[0,0.68,2.15,2.86],
    'studio_M1.wav':[0,0.87,2.06,2.73]
}
thres_ = []
nguong = 0
for key,value in dic_huanluyen.items():
  link = '/content/' + str(key)
  fs, data = wavfile.read(link)
  ma = MA(fs,data)
  gtri = list(np.array(value) // 0.025)
  gtri = [int(gtri) for gtri in gtri]
  i = 1
  #print(ma)
  k_lang = []
  k_noi = []
  while i < len(gtri):
    t = ma[gtri[i-1]:gtri[i]+1]
    k_lang.extend(list(t))
    i = i+2
  i = 1
  while i < len(gtri)-1:
    t = ma[gtri[i]+1:gtri[i+1]]
    k_noi.extend(list(t))
    i = i+2
  #print(len(k_lang),k_lang)
  #print(len(k_noi),k_noi)
  kqua = threshold(k_lang,k_noi)
  thres_.append(kqua)
nguong = sum(thres_)/len(thres_)
print(nguong)

KLmau = []
def KL_Mau(mau):
  for i in np.arange(0,len(mau)):
    KLmau.append(int(mau[i] // 0.025))

Q = []  
def defineVUS(n_khung, normalized_ma, name, nguong):
  for i in np.arange(n_khung):
    if abs(normalized_ma[i]) < nguong:
        Q.append(0)
    else:
        Q.append(1)
  Q.append(0)

KL = []  
def defineKL(n_khung):
  i = 0
  dem = 0
  while (i <= n_khung):
    dau = i
    cuoi = i
    while (Q[cuoi] == 0 and cuoi < n_khung ):
      cuoi = cuoi + 1
    if ( (cuoi-dau) * 0.025 > 0.3):
      KL.append(dau)
      KL.append(dau + (cuoi - dau))
      i = cuoi - 1
    i = i + 1
  #print("Khoang lang tinh toan: " + str(KL))
def paint(name,power,data,fs,n_khung):
    signal_st = data / max(abs(data))
    N = len(data)
    t = N/fs
    T = np.linspace(0.0,t,N) #tạo 1 array cho tgian
    fLen = int(fs * 0.025)
    nF = math.floor(N/fLen)
    p = MA(fs,data)
    t_frame = (np.linspace(fLen/2,N-fLen/2,nF))/fs; #chia khung cho frame để plot lên
    plt.figure(figsize=(35, 10))
    font1 = {'family':'serif','color':'blue','size':40}
    font2 = {'family':'serif','color':'blue','size':20}
    plt.title(name,fontdict = font1)
    plt.ylabel("Amplitude", fontdict = font2)
    plt.xlabel("Time", fontdict = font2)
    plt.plot(T,signal_st,'blue')
    plt.xlim([0.0,t]) #truc thoi gian
    plt.xticks(np.arange(0, t, step=0.5))
    plt.yticks(np.arange(-1,1, step=0.5))
    #p = (p * max(signal_st))
    plt.plot(t_frame,p, color="black") #Vẽ MA
    plt.tight_layout()
    #print(KL)
    for i in np.arange(0,len(KL)):
      #print(i)
      #print(KL)
      #plt.axvline(KL[i] * 0.025, ymin = 0,ymax = 1, color='r', ls='dotted')
      plt.axvline(x = KL[i] * 0.025, color ='red')
    for i in np.arange(0,len(KL)):
      #print(i)
      #print(KLmau)
      plt.axvline(x = KLmau[i] * 0.025, color ='green', linestyle = '--', lw = 5)
    print("\n")
    print("Màu đỏ: Khoảng lặng tính toán")
    print("Màu xanh: Khoảng lặng kiểm thử")
    plt.show()

def VU(name,mau,nguong):
  Q = []
  KL = []
  link = '/content/' + str(name)
  fs, data = wavfile.read(name)
  #thoi gian 1 khung
  t_khung = 0.025
  #do dai 1 khung
  d_khung = t_khung * fs
  #so luong khung
  n_khung = int(len(data) // d_khung)
  #tinh nang luong tin hieu
  power = MA(fs,data)
  #print(power)

  defineVUS(n_khung, power, name,nguong)

  KL_Mau(mau)
  defineKL(n_khung)  
  paint(name,power,data,fs,n_khung)


        #--------------------------------------main-------------------------------------------`  


dic_kiemthu = {
    'phone_F2.wav':[0,1.02,4.04, 4.8],
    'phone_M2.wav':[0,0.53,2.52,2.8],
    'studio_F2.wav':[0,0.77,2.37,3.14],
    'studio_M2.wav':[0,0.45,1.93,2.38]
}
for key,value in dic_kiemthu.items():
  print(key)
  name = key
  TGianKL_Mau = value
  KL = []
  Q = []
  Q_mau = []
  KLmau = []
  VU(name,TGianKL_Mau,nguong)
  KL[len(KL) - 1] = KLmau[len(KLmau) - 1]
  print("Khoảng lặng tính toán: " + str(KL))
  print("Khoảng lặng kiểm thử: " + str(KLmau))
  chenhLech = list(np.array(KL) - np.array(KLmau))
  print("Chênh lệch: " + str(chenhLech))
  print("*" * 100)